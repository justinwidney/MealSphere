### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  Errors: FieldError
  token: String
  user: User
}

type Category {
  Calories: Int!
  Fat: Int!
  IngDescription: String
  IngName: String!
  Protein: Int!
  id: Int!
  recipeHolder: [Recipe_Ing!]!
}

input CategoryAddInput {
  recipeid: Int!
}

input CategoryCreateInput {
  content: String
  recipeCookTime: Int!
  recipeName: String!
  recipeServings: Int!
  skillLvl: Int
}

input ChangePasswordInput {
  password: String!
  token: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FieldError {
  field: String
  message: String
}

input ForgotPasswordInput {
  email: String!
  username: String!
}

type Ingredient {
  Calories: Int!
  Fat: Int!
  IngDescription: String
  IngName: String!
  Protein: Int!
  id: Int!
  recipeHolder: [Recipe_Ing!]!
}

input IngredientAddInput {
  recipeid: Int!
}

input IngredientCreateInput {
  content: String
  recipeCookTime: Int!
  recipeName: String!
  recipeServings: Int!
  skillLvl: Int
}

type Mutation {
  addCategoryToRecipe(data: CategoryAddInput!): Category
  addIngredientToRecipe(data: IngredientAddInput!): Ingredient
  addRecipeToUser(data: RecipeAddInput!): Recipe
  changePassword(data: ChangePasswordInput!): User!
  createCategory(data: CategoryCreateInput!): Category
  createIngredient(data: IngredientCreateInput!): Ingredient
  createRecipe(data: RecipeCreateInput!): Recipe
  createStore(data: StoreCreateInput!): Store
  deleteRecipe(id: Int!): Recipe
  forgotPassword(data: ForgotPasswordInput!): User!
  login(data: UserCreateInput!): AuthPayload!
  signupUser(data: UserCreateInput!): AuthPayload!
}

type Pagination_Recipe {
  Recipes: [Recipe]
  hasMore: Boolean!
}

type Query {
  StoresId(id: Int): Store
  allRecipes(data: RecipeLimit!): Pagination_Recipe!
  allUser_Recipes: [Users_Recipes!]!
  allUser_Stores: [User_Store!]!
  allUsers: [User!]!
  currentUser: User
  myCategorys: [User!]!
  myIngredients: [User!]!
  myRecipes: [User!]!
  myStores: [User!]!
  recipeById(id: Int): Recipe
}

type Recipe implements Recipe_Fragment {
  id: Int!
  ingredients: [Recipe_Ing]
  instructions: String
  instructionssnippet: String
  recipeCookTime: Int!
  recipeHolder: [Users_Recipes]
  recipeName: String!
  recipeServings: Int!
}

input RecipeAddInput {
  recipeid: Int!
}

input RecipeCreateInput {
  instructions: String
  recipeCookTime: Int!
  recipeName: String!
  recipeServings: Int!
  skillLvl: Int
}

input RecipeLimit {
  cursor: String
  limit: Int!
}

interface Recipe_Fragment {
  id: Int!
  ingredients: [Recipe_Ing]
  instructions: String
  instructionssnippet: String
  recipeCookTime: Int!
  recipeHolder: [Users_Recipes]
  recipeName: String!
  recipeServings: Int!
}

type Recipe_Ing {
  Sauce: Boolean!
  amount: String
  id: Int!
  ingredient: Ingredient
  recipe: Recipe
}

type Store {
  User_Store: [User_Store]
  id: Int!
  storeAddress: String!
  storeCity: String!
  storeHours: String
  storeLat: String!
  storeLong: String!
  storeName: String!
  storeState: String!
  storeWebsite: String
}

input StoreCreateInput {
  StoreAddress: String!
  StoreCity: String!
  StoreDescription: String!
  StoreEmail: String!
  StoreHours: String!
  StoreName: String!
  StorePhone: String!
  StoreState: String!
  StoreWebsite: String!
  StoreZip: String
  storeLat: String
  storeLong: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  password: String!
  recipes: [Users_Recipes!]!
  username: String
}

input UserCreateInput {
  email: String!
  password: String!
  username: String!
}

input UserUniqueInput {
  email: String
  id: Int
}

type User_Store {
  store: Store
  user: User
}

input Users_CategorysInput {
  amount: Int
  id: Int
  recipesid: Int!
}

input Users_IngredientsInput {
  amount: Int
  id: Int
  recipesid: Int!
}

type Users_Recipes {
  amount: Int!
  id: Int!
  recipes: Recipe
  user: User
}

input Users_RecipesInput {
  amount: Int
  id: Int
  recipesid: Int!
}
