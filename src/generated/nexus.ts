/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../db"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RecipeCreateInput: { // input type
    content?: string | null; // String
    recipeCookTime: number; // Int!
    recipeName: string; // String!
    recipeServings: number; // Int!
    skillLvl?: number | null; // Int
  }
  UserCreateInput: { // input type
    password: string; // String!
    username: string; // String!
  }
  UserUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
  Users_RecipesInput: { // input type
    amount?: number | null; // Int
    id?: number | null; // Int
    recipesid: number; // Int!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Recipe: { // root type
    id: number; // Int!
    recipeCookTime: number; // Int!
    recipeName: string; // String!
    recipeServings: number; // Int!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    password: string; // String!
    username?: string | null; // String
  }
  Users_Recipes: { // root type
    amount: number; // Int!
    id: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    AddRecipe: NexusGenRootTypes['Users_Recipes'] | null; // Users_Recipes
    createRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    deleteRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    signupUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    allRecipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    allUser_Recipes: NexusGenRootTypes['Users_Recipes'][]; // [Users_Recipes!]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    recipeById: NexusGenRootTypes['Recipe'] | null; // Recipe
  }
  Recipe: { // field return type
    id: number; // Int!
    recipeCookTime: number; // Int!
    recipeHolder: Array<NexusGenRootTypes['Users_Recipes'] | null> | null; // [Users_Recipes]
    recipeName: string; // String!
    recipeServings: number; // Int!
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    password: string; // String!
    recipes: NexusGenRootTypes['Users_Recipes'][]; // [Users_Recipes!]!
    username: string | null; // String
  }
  Users_Recipes: { // field return type
    amount: number; // Int!
    id: number; // Int!
    recipes: NexusGenRootTypes['Recipe'] | null; // Recipe
    user: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    AddRecipe: 'Users_Recipes'
    createRecipe: 'Recipe'
    deleteRecipe: 'Recipe'
    signupUser: 'User'
  }
  Query: { // field return type name
    allRecipes: 'Recipe'
    allUser_Recipes: 'Users_Recipes'
    allUsers: 'User'
    recipeById: 'Recipe'
  }
  Recipe: { // field return type name
    id: 'Int'
    recipeCookTime: 'Int'
    recipeHolder: 'Users_Recipes'
    recipeName: 'String'
    recipeServings: 'Int'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    password: 'String'
    recipes: 'Users_Recipes'
    username: 'String'
  }
  Users_Recipes: { // field return type name
    amount: 'Int'
    id: 'Int'
    recipes: 'Recipe'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    AddRecipe: { // args
      data: NexusGenInputs['Users_RecipesInput']; // Users_RecipesInput!
    }
    createRecipe: { // args
      data: NexusGenInputs['RecipeCreateInput']; // RecipeCreateInput!
    }
    deleteRecipe: { // args
      id: number; // Int!
    }
    signupUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
  }
  Query: {
    recipeById: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}